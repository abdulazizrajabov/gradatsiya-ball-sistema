// src/bot.js

const { Telegraf, Markup, Scenes, session } = require('telegraf');
const db = require('./models');
const User = db.User;
const Class = db.Class;
const StoreItem = db.StoreItem;
const History = db.History;
const { notifyAdmin, notifyStudent } = require('./utils/notifications');
require('dotenv').config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const adminIds = process.env.ADMIN_TELEGRAM_IDS.split(',').map(id => id.trim());

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
const isAdmin = (telegramId) => adminIds.includes(telegramId.toString());

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Session Middleware
bot.use(session());

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /addstudent –∏ /addclass
const { BaseScene, Stage } = Scenes;

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
const addStudentScene = new BaseScene('ADD_STUDENT_SCENE');

addStudentScene.enter((ctx) => {
    console.log('–°—Ü–µ–Ω–∞ ADD_STUDENT_SCENE: –í—Ö–æ–¥');
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ Telegram ID —É—á–µ–Ω–∏–∫–∞:');
});

addStudentScene.on('text', async (ctx) => {
    const step = ctx.session.step || 'telegram_id';

    if (step === 'telegram_id') {
        const studentTelegramId = ctx.message.text.trim();
        console.log(`–í–≤–æ–¥ Telegram ID: ${studentTelegramId}`);
        if (isNaN(studentTelegramId)) {
            ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID —É—á–µ–Ω–∏–∫–∞:');
            return;
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
        const existingUser = await User.findOne({ where: { telegram_id: studentTelegramId } });
        if (existingUser) {
            ctx.reply('–£—á–µ–Ω–∏–∫ —Å —ç—Ç–∏–º Telegram ID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.');
            ctx.scene.leave();
            return;
        }
        ctx.session.studentTelegramId = studentTelegramId;
        ctx.session.step = 'full_name';
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:');
    } else if (step === 'full_name') {
        const fullName = ctx.message.text.trim();
        console.log(`–í–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏: ${fullName}`);
        if (!fullName) {
            ctx.reply('–ü–æ–ª–Ω–æ–µ –∏–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:');
            return;
        }
        ctx.session.fullName = fullName;

        // –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞
        const classes = await Class.findAll();
        if (classes.length === 0) {
            ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É.');
            ctx.scene.leave();
            return;
        }

        const classButtons = classes.map(cls => [Markup.button.callback(cls.name, `select_class_${cls.id}`)]);
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å —É—á–µ–Ω–∏–∫–∞:', Markup.inlineKeyboard(classButtons).oneTime().resize());
        ctx.session.step = 'class_selection';
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –≤–Ω—É—Ç—Ä–∏ —Å—Ü–µ–Ω—ã
addStudentScene.action(/^select_class_(\d+)$/, async (ctx) => {
    const classId = ctx.match[1];
    console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–ª –∫–ª–∞—Å—Å —Å ID: ${classId}`);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const selectedClass = await Class.findByPk(classId);
    if (!selectedClass) {
        ctx.reply('–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        ctx.scene.leave();
        return;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–∞ –∏–∑ ctx.session
    const studentTelegramId = ctx.session.studentTelegramId;
    const fullName = ctx.session.fullName;

    if (!studentTelegramId || !fullName) {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.');
        ctx.scene.leave();
        return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
    try {
        const newUser = await User.create({
            telegram_id: studentTelegramId,
            full_name: fullName,
            class_id: selectedClass.id,
        });

        ctx.reply(`–£—á–µ–Ω–∏–∫ ${newUser.full_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–ª–∞—Å—Å ${selectedClass.name}.`);
        ctx.scene.leave();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞
        await notifyStudent(bot, studentTelegramId, `–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–∞–º–∏ –≤ –∫–ª–∞—Å—Å–µ ${selectedClass.name}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é.`);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
        await notifyAdmin(bot, `üßë‚Äçüè´ –ù–æ–≤—ã–π —É—á–µ–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ${newUser.full_name} (Telegram ID: ${newUser.telegram_id}) –≤ –∫–ª–∞—Å—Å ${selectedClass.name}.`);
        console.log(`–£—á–µ–Ω–∏–∫ ${newUser.full_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–ª–∞—Å—Å ${selectedClass.name}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        ctx.scene.leave();
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞
const addClassScene = new BaseScene('ADD_CLASS_SCENE');

addClassScene.enter((ctx) => {
    console.log('–°—Ü–µ–Ω–∞ ADD_CLASS_SCENE: –í—Ö–æ–¥');
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞:');
});

addClassScene.on('text', async (ctx) => {
    const className = ctx.message.text.trim();
    console.log(`–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞: ${className}`);

    if (!className) {
        ctx.reply('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞:');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–ª–∞—Å—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    const existingClass = await Class.findOne({ where: { name: className } });
    if (existingClass) {
        ctx.reply('–ö–ª–∞—Å—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
        ctx.scene.leave();
        return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
    try {
        const newClass = await Class.create({ name: className });
        ctx.reply(`–ö–ª–∞—Å—Å "${newClass.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`);
        ctx.scene.leave();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        await notifyAdmin(bot, `üìö –ù–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω: "${newClass.name}"`);
        console.log(`–ö–ª–∞—Å—Å "${newClass.name}" –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        ctx.scene.leave();
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ Stage –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω
const stage = new Stage([addStudentScene, addClassScene]);
bot.use(stage.middleware());

// –ö–æ–º–∞–Ω–¥–∞ /addstudent –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
bot.command('addstudent', async (ctx) => {
    const telegramId = ctx.from.id;
    console.log(`–ö–æ–º–∞–Ω–¥–∞ /addstudent –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID: ${telegramId}`);
    if (!isAdmin(telegramId)) {
        ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
        return;
    }

    ctx.scene.enter('ADD_STUDENT_SCENE');
});

// –ö–æ–º–∞–Ω–¥–∞ /addclass –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
bot.command('addclass', async (ctx) => {
    const telegramId = ctx.from.id;
    console.log(`–ö–æ–º–∞–Ω–¥–∞ /addclass –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID: ${telegramId}`);
    if (!isAdmin(telegramId)) {
        ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
        return;
    }

    ctx.scene.enter('ADD_CLASS_SCENE');
});

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
const studentMenu = Markup.keyboard([
    ['–ú–æ–∏ –±–∞–ª–ª—ã', '–û–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã'],
    ['–†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–ª–∞—Å—Å—É']
]).resize();

// –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
bot.start(async (ctx) => {
    const user = await User.findOne({ where: { telegram_id: ctx.from.id } });
    if (user) {
        ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–∞–º–∏!', studentMenu);
    } else {
        ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–∞–º–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ú–æ–∏ –±–∞–ª–ª—ã"
bot.hears('–ú–æ–∏ –±–∞–ª–ª—ã', async (ctx) => {
    const user = await User.findOne({ where: { telegram_id: ctx.from.id } });
    if (!user) {
        ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
    }
    ctx.reply(`–£ –≤–∞—Å ${user.total_points} –±–∞–ª–ª–æ–≤.`, studentMenu);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–û–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã"
bot.hears('–û–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã', async (ctx) => {
    const user = await User.findOne({ where: { telegram_id: ctx.from.id } });
    if (!user) {
        ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
    }

    const items = await StoreItem.findAll({ where: { is_active: true } });
    if (items.length === 0) {
        ctx.reply('–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.');
        return;
    }

    let message = '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n';
    items.forEach(item => {
        message += `‚Ä¢ ${item.name} - ${item.price} –±–∞–ª–ª–æ–≤\n–û–ø–∏—Å–∞–Ω–∏–µ: ${item.description}\n\n`;
    });
    ctx.reply(message);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–ª–∞—Å—Å—É"
bot.hears('–†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–ª–∞—Å—Å—É', async (ctx) => {
    const user = await User.findOne({ where: { telegram_id: ctx.from.id }, include: Class });
    if (!user) {
        ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
    }

    const topStudents = await User.findAll({
        where: { class_id: user.class_id },
        order: [['total_points', 'DESC']],
        limit: 10,
    });

    let message = `–¢–æ–ø —É—á–µ–Ω–∏–∫–æ–≤ –∫–ª–∞—Å—Å–∞ ${user.Class.name}:\n`;
    topStudents.forEach((student, index) => {
        message += `${index + 1}. ${student.full_name} - ${student.total_points} –±–∞–ª–ª–æ–≤\n`;
    });

    ctx.reply(message);
});

// –ö–æ–º–∞–Ω–¥–∞ /buy –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
bot.command('buy', async (ctx) => {
    const user = await User.findOne({ where: { telegram_id: ctx.from.id } });
    if (!user) {
        ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
    }

    const items = await StoreItem.findAll({ where: { is_active: true, quantity: { [db.Sequelize.Op.gt]: 0 } } });
    if (items.length === 0) {
        ctx.reply('–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.');
        return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    const buttons = items.map(item => [
        Markup.button.callback(`${item.name} - ${item.price} –±–∞–ª–ª–æ–≤`, `buy_${item.id}`)
    ]);

    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', Markup.inlineKeyboard(buttons));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
bot.action(/buy_(\d+)/, async (ctx) => {
    const itemId = ctx.match[1];
    console.log(`–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å ID: ${itemId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID: ${ctx.from.id}`);

    const user = await User.findOne({ where: { telegram_id: ctx.from.id } });
    if (!user) {
        ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        ctx.answerCbQuery();
        return;
    }

    const item = await StoreItem.findByPk(itemId);
    if (!item || !item.is_active || item.quantity < 1) {
        ctx.reply('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏.');
        ctx.answerCbQuery();
        return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ API
    const axios = require('axios');
    const apiUrl = process.env.API_URL || 'http://localhost:3000'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL API

    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω
    // –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —É—á–µ–Ω–∏–∫–∞–º–∏
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –º—ã –ø—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç–æ—Ç —à–∞–≥ –∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ API –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ Telegram ID

    try {
        const response = await axios.post(`${apiUrl}/store/purchase`, {
            student_id: user.id,
            item_id: item.id,
            quantity: 1, // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        }, {
            headers: {
                'Authorization': `Bearer ${user.jwt_token}`, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω
            }
        });
        ctx.reply(response.data.message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É:', error.response ? error.response.data : error.message);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    ctx.answerCbQuery();
});

// Graceful stop
bot.launch();
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

module.exports = { bot, notifyStudent };
